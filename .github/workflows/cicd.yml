# .github/workflows/deploy.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  HOST: ${{ secrets.HOST }}
  HOST_USERNAME: ${{ secrets.HOST_USERNAME }}
  HOST_SSH_KEY: ${{ secrets.HOST_SSH_KEY }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DB_ROOT: ${{ secrets.DB_ROOT }}
  FRONT_URL: ${{ secrets.FRONT_URL }}
  EMAIL: ${{ secrets.EMAIL }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 백엔드 테스트
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      - name: Run backend tests
        run: |
          cd backend
          ./gradlew test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      # 백엔드 빌드
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      - name: Build backend with Gradle
        run: |
          cd backend
          ./gradlew build -x test

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Docker Compose로 이미지 빌드
      - name: Build Docker images with docker-compose
        run: |
          export DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
          export GITHUB_SHA=${{ github.sha }}
          export COMPOSE_BAKE=true
          docker compose build

      # 이미지에 latest 태그 추가 및 Docker Hub에 푸시
      - name: Tag and push images to Docker Hub
        run: |
          docker compose push
          
          docker tag ${{ env.DOCKER_USERNAME }}/nuriwoolim-backend:${{ github.sha }} ${{ env.DOCKER_USERNAME }}/nuriwoolim-backend:latest
          
          docker push ${{ env.DOCKER_USERNAME }}/nuriwoolim-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Copy docker-compose-server.yml to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.HOST }}
          username: ${{ env.HOST_USERNAME }}
          key: ${{ env.HOST_SSH_KEY }}
          source: "docker-compose-server.yml"
          target: "/home/ubuntu/"

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.HOST }}
          username: ${{ env.HOST_USERNAME }}
          key: ${{ env.HOST_SSH_KEY }}
          script: |
            echo "Deploying to Server instance..."
            echo "make environment variables"
            export DOCKER_USERNAME="${{ env.DOCKER_USERNAME }}"
            export "${{ env.DOCKER_PASSWORD }}"
            export DB_NAME="${{ env.DB_NAME }}"
            export DB_USERNAME="${{ env.DB_USERNAME }}"
            export DB_PASSWORD="${{ env.DB_PASSWORD }}"
            export DB_ROOT="${{ env.DB_ROOT }}"
            export SECRET_KEY="${{ env.SECRET_KEY }}"
            export EMAIL="${{ env.EMAIL }}"
            export EMAIL_PASSWORD="${{ env.EMAIL_PASSWORD }}"
            export FRONT_URL="${{ env.FRONT_URL }}"
            
            # 기존 컨테이너 중지 및 제거
            echo "Stopping and removing existing containers..."
            docker compose -f docker-compose-server.yml down || true
            
            echo "로그인"
            echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin
            
            # 최신 이미지 풀
            echo "Pulling latest Docker images..."
            docker pull ${{ env.DOCKER_USERNAME }}/nuriwoolim-backend:latest
            
            # Docker Compose로 애플리케이션 실행
            echo "Starting application with Docker Compose..."
            docker compose -f docker-compose-server.yml up -d
            
            # 사용하지 않는 이미지 정리
            echo "Cleaning up unused Docker images..."
            docker image prune -f